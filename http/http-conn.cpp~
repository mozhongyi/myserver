/*************************************************************************
    > File Name: http-conn.cpp
    > Author: sheep
    > Created Time: 2025年05月12日 星期一 17时29分34秒
 ************************************************************************/
#include "http_conn.h"
#include "mysql/mysql.h"
#include <fstream>

//定义http响应的一些状态信息
const char *ok_200_title = "OK";
const char *error_400_title = "Bad Request";
const char *error_403_title = "Your request has bad syntax or is inherently impossible to staisfy.\n";
const char *error_403_form = "You do not have permission to get file form this server.\n";
const char *error_404_title = "Not Found";
const char *error_404_form = "The requested file was not found on this server.\n";
const char *error_500_title = "Internal Error";
const char *error_500_form = "There was unusual problem serving the request file.\n"l

locker m_lock;
map<string, string> users;

void http_conn::initmysql_result(connection_pool *connPool)
{
	//先从连接池中取一个连接
	MYSQL *mysql = NULL;
	connectuonRAII mysqlcon(&mysql, connPool);

	//在user表中检索username, passwd数据,浏览器输入
	if(mysql_query(mysql, "Select username, passwd FROM user"))
	{
		// mysql_error()返回最后一次MySQL操作的错误描述
		LOG_ERROR("SELECT error:%s\n", mysql_error(mysql));
	}

	//从表中检索完整的结果集
	MYSQL_RES *result = mysql_store_result(mysql);

	//返回结果集中的列数
	int num_fields = mysql_num_fields(result);

	//返回所有字段结构的数组
	MYSQL_FIELD *fields = mysql_fetch_fields(result);

	//从结果集中获取下一行,将对应的用户名和密码，存入map中
	while(MYSQL_ROW row = mysql_fetch_row(result))
	{
		string temp1(row[0]);
		string temp2(row[1]);
		users[temp1] = temp2;
	}
}

//对文件描述符设置非阻塞
int setnonblocking(int fd)
{
	int old option = fcntl(fd, F_GETFL);
	int new_option = old_option | O_NONBLOCK;
	fcntl(fd, F_SETFL, new_option);
	return old_option;
}

//将内核事件表注册读事件，ET模式，选择开启EPOLLONESHOT
void addfd(int epollfd, int fd, bool one_shot, int TRIGMode)
{
	epoll_event event;
	event.data.fd = fd;
	
	// 设置事件类型
	if(1 == TRIGMode)
		event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;
	else
		event.events = EPOLLIN | EPOLLRDHUP;
	
	if(one_shot)
		// EPOLLONESHOT - 一个事件只触发一次，除非用epoll_ctl重置
		event.events |= EPOLLONESHOT;
	epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);
	//设置文件描述符为非阻塞模式
	setnonblocking(fd);
}

//从内核时间表删除描述符
void removefd(int epollfd, int fd)
{
	epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, 0);
	close(fd);
}

//将事件重置为EPOLLONESHOT
void modfd(int epollfd, int fd, int ev, int TRIGMode)
{
	epoll_event event;
	event.data.fd = fd;

	if(1 == TRIGMode)
		event.events = ev | EPOLLET | EPOLLONESHOT | EPOLLRDHUP;
	else
		event.events = ev | EPOLLONESHOT | EPOLLRDHUP;
	
	// EPOLL_CTL_MOD - 修改已注册的文件描述符的事件
	epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, &event);
}

int http_conn::m_user_count = 0;
int http_conn::m_epollfd = -1;

// 关闭连接，关闭一个连接，客户总量减一
// 参数：read_close - 是否真正需要关闭连接(用于条件性关闭)
void http_conn::close_conn(bool read_close)
{
	// 检查是否需要真正关闭且套接字描述符有效
	if(real_close && (m_sockfd) != -1)
	{
		// 打印关闭的套接字信息(调试用)
		printf("close %d\n", m_sockfd);
		// 将套接字描述符设为无效值(-1)
		removefd(m_epollfd, m_sockfd);
		m_sockfd = -1;
		m_user_count--;
	}
}


//初始化连接，外部调用初始化套接字地址
void http_conn::init(int sockfd, const sockaddr_in &addr, char *root, int TRIGMode, int close_log, string user, string passwd, string sqlname)
{
	// 设置套接字描述符和客户端地址
	m_scokfd = scokfd;
	m_address = addr;
	
	// 将套接字添加到epoll监控
	addfd(m_epollfd, sockfd, true, m_TRIGMode);

	// 增加当前用户连接计数
	m_user_count++;

	//当浏览器出现连接重置时，可能是网站根目录出错或http响应格式出错或者访问的文件中的内容完全为空
	//初始化网站根目录和相关设置
	doc_root = root;
	m_TRIGMode = TRIGMode;
	m_close_log = close_log;

	// 数据库相关参数设置
	strcpy(sql_user, user.c_str());
	strcpy(sql_passwd, passwd.c_str());
	strcpy(sql_name, sqlname.c_str());
	
	// 调用类内部初始化函数
	init();
}

// 初始化新接受的连接
// check_state默认为分析请求行状态
void http_conn::init()
{
	// 重置MySQL连接指针，将在需要时建立连接
	mysql = NULL;
	// 待发送字节数清零
	bytes_to_send = 0;
	// 初始状态：解析请求行
	m_check_state = CHECK_STATE_REQUESTLINE;
	// 默认不保持连接(HTTP Keep-Alive)
	m_linger = false;

	// 默认GET方法
	m_method = GET;
	// 请求URL指针重置
	m_url = 0;
	// HTTP版本指针重置
	m_version = 0;
	// 内容长度清零
	m_content_length = 0;
	// 主机头指针重置
	m_host = 0;

	// 行起始位置重置
	m_start_line = 0;
	// 已解析位置重置
	m_checked_idx = 0;
	// 读缓冲区位置重置
	m_read_idx = 0;
	// 写缓冲区位置重置
	m_write_idx = 0;

	// CGI模式标志重置
	cgi = 0;
	// 连接状态重置
	m_state = 0;
	// 定时器标志重置
	timer_flag = 0;
	// 改进标志重置(用于特殊处理)
	improv = 0;

	// 清空读缓冲区
	memset(m_read_buf, '\0', READ_BUFFER_SIZE);
	// 清空写缓冲区
	memset(m_write_buf, '\0', WRITE_BUFFER_SIZE);
	// 清空文件名缓冲区
	memset(m_real_file, '\0', FILENAME_LEN);
}

// 从状态机，用于分析一行内容
// 返回为行的读取状态，有LINE_OK,LINE_BAD,LINE_OPEN
http_conn::LINE_STATUS http_conn::parse_line()
{
	// 临时存储当前检查的字符
	char temp;
	// 遍历已读取但未检查的数据
	for(; m_checked_idx < m_read_id; ++m_checked_idx)
	{
		// 获取当前字符
		temp = m_read_buf[m_checked_idx];
		// 情况1：遇到回车符\r
		if(temp == '\r')
		{
			// 检查是否是缓冲区末尾(数据不完整)
			if((m_checked_idx + 1) == m_read_idx)
				return LINE_OPEN;
			// 检查是否跟随换行符\n(标准HTTP行结束)
			else if(m_read_buf[m_checked_idx + 1] == '\n')
			{
				// 将\r\n替换为字符串结束符\0\0
				m_read_buf[m_checked_idx++] = '\0';
				m_read_buf[m_checked_idx++] = '\0';
				// 成功解析一行
				return LINE_OK;
			}
			// 只有\r没有\n，格式错误
			return LINE_BAD;
		}
		// 情况2：遇到换行符\n(可能是前一个缓冲区以\r结束的情况)
		else if(temp == '\n')
		{
			// 检查前面是否是\r(跨缓冲区的行结束)
			if(m_checked_idx > 1 && m_read_buf[m_checked_idx - 1] == '\r')
			{
				// 将\r\n替换为字符串结束符\0\0
				m_read_buf[m_checked_idx - 1] = '\0';
				m_read_buf[m_checked_idx++] = '\0';
				return LINE_OK;
			}
			// 单独的\n，格式错误
			return LINE_BAD;
		}
	}
	// 遍历完所有数据但没找到行结束符
	return LINE_OPEN;
}


